{"version":3,"sources":["../../babel-transform-damu-plugin/src/index.js","demos.js","App.js","serviceWorker.js","index.js"],"names":["babel_transform_damu_plugin_src","Object","helper_plugin_utils_lib","api","options","assertVersion","name","inherits","plugin_syntax_jsx_lib_default","a","visitor","JSXElement","path","_transformJSXElement","transformJSXElement","identifier","statements","replaceWith","reverse","forEach","statement","scope","unshiftContainer","JSXFragment","list","_path$get$filter$map$","get","filter","isEmptyJSXText","map","transformElement","reduce","result","_ref","_result$statements","identifiers","push","apply","toConsumableArray","types_lib","CallExpression","exit","node","callee","type","object","property","args","arguments","elem","target","appendChild","Program","DamuBindings","bindings","Damu","remove","generateUidIdentifier","documentCreateTextNode","value","transformJSXText","Error","getIdentifierName","openingElement","declaration","elemName","declareConst","documentCreateElement","attributes","attr","key","_value","expression","setAttribute","_ref2","child","concat","children","text","parent","trim","demos","simple","fragment","demoList","keys","EDITOR_PROPS","$blockScrolling","ACE_PREVIEW_OPTIONS","useWorker","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","setState","error","transpile","onChangeTemplate","event","currentTarget","code","babel","plugins","damuPlugin","then","transpiled","split","line","test","join","catch","message","state","react_default","createElement","Fragment","className","demo","rel","href","lib_default","height","width","mode","theme","fontSize","showGutter","editorProps","tabSize","enableBasicAutocompletion","enableLiveAutocompletion","showLineNumbers","debounceChangePeriod","readOnly","setOptions","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cce4885e.chunk.js","sourcesContent":["import _toConsumableArray from \"/Users/lhtan/Projects/damu/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport jsx from '@babel/plugin-syntax-jsx';\nimport { declare } from '@babel/helper-plugin-utils';\nimport * as t from '@babel/types';\nexport default declare(function (api, options) {\n  api.assertVersion(7);\n  return {\n    name: 'babel-transform-damu-plugin',\n    inherits: jsx,\n    visitor: {\n      JSXElement: function JSXElement(path) {\n        var _transformJSXElement = transformJSXElement(path),\n            identifier = _transformJSXElement.identifier,\n            statements = _transformJSXElement.statements;\n\n        path.replaceWith(identifier);\n        statements.reverse().forEach(function (statement) {\n          path.scope.path.unshiftContainer('body', statement);\n        });\n      },\n      JSXFragment: function JSXFragment(path) {\n        var _path$get$filter$map$ = path.get('children').filter(isEmptyJSXText).map(transformElement).reduce(function (result, _ref) {\n          var _result$statements;\n\n          var identifier = _ref.identifier,\n              statements = _ref.statements;\n          result.identifiers.push(identifier);\n\n          (_result$statements = result.statements).push.apply(_result$statements, _toConsumableArray(statements));\n\n          return result;\n        }, {\n          identifiers: [],\n          statements: []\n        }),\n            identifiers = _path$get$filter$map$.identifiers,\n            statements = _path$get$filter$map$.statements;\n\n        path.replaceWith(toArray(identifiers));\n        statements.reverse().forEach(function (statement) {\n          path.scope.path.unshiftContainer('body', statement);\n        });\n      },\n      CallExpression: {\n        exit: function exit(path) {\n          if (isDamuRender(path.node)) {\n            var args = path.node.arguments;\n            var elem = args[0];\n            var target = args[1];\n            path.replaceWith(appendChild(target, elem));\n          }\n        }\n      },\n      Program: {\n        exit: function exit(path) {\n          var DamuBindings = path.scope.bindings.Damu;\n\n          if (DamuBindings) {\n            DamuBindings.path.remove();\n          } // // console.log(path.scope.bindings.Damu.referencePaths.length);\n          // console.log('');\n          // console.log('');\n          // console.log('');\n          // console.log('');\n          // console.log('');\n          // console.log('');\n\n        }\n      }\n    }\n  };\n});\n\nfunction transformElement(path) {\n  switch (path.node.type) {\n    case 'JSXElement':\n      return transformJSXElement(path);\n\n    case 'JSXText':\n      return transformJSXText(path);\n\n    default:\n      throw new Error('Unknown element type:', path.node.type);\n  }\n}\n\nfunction transformJSXElement(path) {\n  var name = getIdentifierName(path.node.openingElement.name);\n  var identifier = path.scope.generateUidIdentifier(name);\n  var result = [];\n  var declaration = documentCreateElement(identifier, name);\n  result.push(declaration);\n  var attributes = path.node.openingElement.attributes.map(function (attr) {\n    return setAttribute(identifier, attr.name.name, attr.value);\n  });\n  attributes.forEach(function (attr) {\n    return result.push(attr);\n  });\n  var childrens = path.get('children').filter(isEmptyJSXText).map(transformElement).map(function (_ref2) {\n    var child = _ref2.identifier,\n        statements = _ref2.statements;\n    return [].concat(_toConsumableArray(statements), [appendChild(identifier, child)]);\n  });\n  childrens.forEach(function (children) {\n    return result.push.apply(result, _toConsumableArray(children));\n  });\n  return {\n    identifier: identifier,\n    statements: result\n  };\n}\n\nfunction transformJSXText(path) {\n  var identifier = path.scope.generateUidIdentifier('text');\n  return {\n    identifier: identifier,\n    statements: [documentCreateTextNode(identifier, path.node.value)]\n  };\n}\n\nfunction getIdentifierName(node) {\n  switch (node.type) {\n    case 'JSXMemberExpression':\n      return getIdentifierName(node.object) + '.' + getIdentifierName(node.property);\n\n    case 'JSXIdentifier':\n      return node.name;\n\n    default:\n      throw new Error('Unknown type: ', node.type);\n  }\n}\n\nfunction documentCreateElement(identifier, elemName) {\n  // handle functional component?\n  return declareConst(identifier, t.callExpression(t.memberExpression(t.identifier('document'), t.identifier('createElement')), [t.stringLiteral(elemName)]));\n}\n\nfunction documentCreateTextNode(identifier, text) {\n  return declareConst(identifier, t.callExpression(t.memberExpression(t.identifier('document'), t.identifier('createTextNode')), [t.stringLiteral(text)]));\n}\n\nfunction declareConst(identifier, value) {\n  return t.variableDeclaration('const', [t.variableDeclarator(identifier, value)]);\n}\n\nfunction appendChild(parent, child) {\n  return t.expressionStatement(t.callExpression(t.memberExpression(parent, t.identifier('appendChild')), [child]));\n}\n\nfunction setAttribute(identifier, key, value) {\n  var _value = value.type === 'JSXExpressionContainer' ? value.expression : value;\n\n  return t.expressionStatement(t.callExpression(t.memberExpression(identifier, t.identifier('setAttribute')), [t.stringLiteral(key), _value]));\n}\n\nfunction isEmptyJSXText(path) {\n  return !(path.node.type === 'JSXText' && path.node.value.trim() === '');\n}\n\nfunction toArray(list) {\n  return t.arrayExpression(list);\n}\n\nfunction isDamuRender(node) {\n  return node.callee && node.callee.type === 'MemberExpression' && node.callee.object && node.callee.object.type === 'Identifier' && node.callee.object.name === 'Damu' && node.callee.property.type === 'Identifier' && node.callee.property.name === 'render';\n}","export default {\n  simple: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <div id=\"foo\" foo={'bar'} height={54} />,\n  document.querySelector('#app')\n);`,\n  fragment: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <>\n    <div className=\"child-1\" />\n    <div className=\"child-2\" />\n  </>,\n  document.querySelector('#app')\n);`,\n\n  list: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <div className=\"body\">\n    <h1 className=\"header\">You shall not pass</h1>\n    <li>\n      <ul id=\"item-1\">Item 1</ul>\n      <ul id=\"item-2\">Item 2</ul>\n      <ul id=\"item-3\">Item 3</ul>\n      <ul id=\"item-4\">Item 4</ul>\n      <ul id=\"item-5\">Item 5</ul>\n      <ul id=\"item-6\">Item 6</ul>\n      <ul id=\"item-7\">Item 7</ul>\n    </li>\n  </div>,\n  document.querySelector('#app')\n);`,\n};\n","import React, { Component } from 'react';\n\nimport AceEditor from 'react-ace';\nimport 'brace';\nimport 'brace/mode/jsx';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport * as babel from '@babel/core';\nimport damuPlugin from '@damu/babel-transform-damu-plugin';\nimport demos from './demos';\n\nimport './App.css';\n\nconst demoList = Object.keys(demos);\nconst EDITOR_PROPS = { $blockScrolling: true };\nconst ACE_PREVIEW_OPTIONS = { useWorker: false };\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: demos.simple,\n      transpiled: '',\n      error: null,\n    };\n  }\n  onChange = value => {\n    this.setState({ value, error: null });\n    this.transpile(value);\n  };\n\n  onChangeTemplate = event => {\n    const value = demos[event.currentTarget.value];\n    this.setState({\n      value,\n      error: null,\n    });\n    this.transpile(value);\n  };\n\n  componentDidMount() {\n    this.transpile(this.state.value);\n  }\n\n  transpile = code => {\n    babel\n      .transformAsync(code, {\n        plugins: [damuPlugin],\n      })\n      .then(result => {\n        this.setState({ transpiled: simplePrettier(result.code) });\n      })\n      .catch(error => {\n        this.setState({ transpiled: '', error: error.message });\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"navbar\">\n          <span>Damu Demo</span>\n          <label>\n            {'Demo: '}\n            <select onChange={this.onChangeTemplate}>\n              {demoList.map(demo => (\n                <option value={demo}>{demo}</option>\n              ))}\n            </select>\n          </label>\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://github.com/tanhauhau/damu\"\n          >\n            View it on Github\n          </a>\n        </div>\n        <div className=\"App\">\n          <AceEditor\n            height=\"calc(100vh - 50px)\"\n            width=\"50vw\"\n            mode=\"jsx\"\n            theme=\"tomorrow\"\n            fontSize={14}\n            onChange={this.onChange}\n            showGutter={true}\n            name=\"editor\"\n            value={this.state.value}\n            editorProps={EDITOR_PROPS}\n            tabSize={2}\n            enableBasicAutocompletion={true}\n            enableLiveAutocompletion={true}\n            showLineNumbers={true}\n            debounceChangePeriod={100}\n          />\n\n          <AceEditor\n            height=\"calc(100vh - 50px)\"\n            width=\"50vw\"\n            mode=\"javascript\"\n            theme=\"tomorrow\"\n            readOnly={true}\n            fontSize={14}\n            showGutter={true}\n            name=\"preview\"\n            value={this.state.error || this.state.transpiled}\n            editorProps={EDITOR_PROPS}\n            tabSize={2}\n            showLineNumbers={true}\n            setOptions={ACE_PREVIEW_OPTIONS}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nfunction simplePrettier(code) {\n  return code\n    .split('\\n')\n    .filter(line => line.trim() !== '')\n    .map(line => (/^(const|document)/.test(line) ? '\\n' + line : line))\n    .join('\\n')\n    .trim();\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}