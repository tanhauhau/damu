{"version":3,"sources":["../../babel-transform-damu-plugin/src/index.js","demos.js","App.js","serviceWorker.js","index.js"],"names":["babel_transform_damu_plugin_src","Object","helper_plugin_utils_lib","api","options","assertVersion","name","inherits","plugin_syntax_jsx_lib_default","a","visitor","JSXElement","path","_transformJSXElement","transformJSXElement","identifier","statements","replaceWith","reverse","forEach","statement","unshiftIntoBlock","scope","JSXFragment","list","_path$get$filter$map$","get","filter","isEmptyJSXText","map","elem","transformElement","reduce","result","_ref","_result$statements","identifiers","push","apply","toConsumableArray","types_lib","CallExpression","exit","node","callee","type","object","property","args","arguments","target","appendChild","Program","DamuBindings","bindings","Damu","remove","parent","generateUidIdentifier","documentCreateTextNode","value","transformJSXText","expression","transformBinaryExpression","length","includes","normalizeBlockStatement","mapperBody","returnStatement","find","b","argument","_statements","declareConst","transformMapCallExpresion","transformCallExpression","operator","consequent","ifBlock","left","transformLogicalAndExpression","alternate","transformLogicalOrExpression","Error","transformLogicalExpression","test","transformConditionalExpression","transformJSXExpression","transformIdentifier","getIdentifierName","openingElement","declaration","elemName","documentCreateElement","attributes","attr","key","_value","setAttribute","_ref2","children","child","elements","c","trim","condition","thenCase","elseCase","thenCaseArray","Array","isArray","elseCaseArray","unshiftContainer","demos","simple","fragment","demoList","keys","EDITOR_PROPS","$blockScrolling","ACE_PREVIEW_OPTIONS","useWorker","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","setState","error","transpile","onChangeTemplate","event","currentTarget","onPreviewModeChange","previewMode","code","babel","plugins","damuPlugin","then","transpiled","split","line","join","iframe","firstChild","removeChild","document","createElement","previewIframe","contentDocument","contentWindow","open","write","concat","codeToHtml","close","catch","message","onIframeRef","ref","state","react_default","Fragment","className","demo","rel","href","lib_default","height","width","mode","theme","fontSize","showGutter","editorProps","tabSize","enableBasicAutocompletion","enableLiveAutocompletion","showLineNumbers","id","checked","readOnly","setOptions","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f4024bb.chunk.js","sourcesContent":["import _toConsumableArray from \"/Users/lhtan/Projects/damu/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport jsx from '@babel/plugin-syntax-jsx';\nimport { declare } from '@babel/helper-plugin-utils';\nimport * as t from '@babel/types';\nexport default declare(function (api, options) {\n  api.assertVersion(7);\n  return {\n    name: 'babel-transform-damu-plugin',\n    inherits: jsx,\n    visitor: {\n      JSXElement: function JSXElement(path) {\n        var _transformJSXElement = transformJSXElement(path),\n            identifier = _transformJSXElement.identifier,\n            statements = _transformJSXElement.statements;\n\n        path.replaceWith(identifier);\n        statements.reverse().forEach(function (statement) {\n          unshiftIntoBlock(path.scope.path, statement);\n        });\n      },\n      JSXFragment: function JSXFragment(path) {\n        var _path$get$filter$map$ = path.get('children').filter(isEmptyJSXText).map(function (elem) {\n          return transformElement(elem);\n        }).reduce(function (result, _ref) {\n          var _result$statements;\n\n          var identifier = _ref.identifier,\n              statements = _ref.statements;\n          result.identifiers.push(identifier);\n\n          (_result$statements = result.statements).push.apply(_result$statements, _toConsumableArray(statements));\n\n          return result;\n        }, {\n          identifiers: [],\n          statements: []\n        }),\n            identifiers = _path$get$filter$map$.identifiers,\n            statements = _path$get$filter$map$.statements;\n\n        path.replaceWith(toArray(identifiers));\n        statements.reverse().forEach(function (statement) {\n          unshiftIntoBlock(path.scope.path, statement);\n        });\n      },\n      CallExpression: {\n        exit: function exit(path) {\n          if (isDamuRender(path.node)) {\n            var args = path.node.arguments;\n            var elem = args[0];\n            var target = args[1];\n            path.replaceWith(appendChild(target, elem));\n          }\n        }\n      },\n      Program: {\n        exit: function exit(path) {\n          var DamuBindings = path.scope.bindings.Damu;\n\n          if (DamuBindings) {\n            DamuBindings.path.remove();\n          } // // console.log(path.scope.bindings.Damu.referencePaths.length);\n          // console.log('');\n          // console.log('');\n          // console.log('');\n          // console.log('');\n          // console.log('');\n          // console.log('');\n\n        }\n      }\n    }\n  };\n});\n\nfunction transformElement(path, parent) {\n  switch (path.node.type) {\n    case 'JSXElement':\n      return transformJSXElement(path, parent);\n\n    case 'JSXText':\n    case 'StringLiteral':\n      return transformJSXText(path, parent);\n\n    case 'JSXExpressionContainer':\n      return transformJSXExpression(path, parent);\n\n    case 'Identifier':\n    case 'MemberExpression':\n      return transformIdentifier(path, parent);\n\n    default:\n      throw new Error('Unknown element type: ' + path.node.type);\n  }\n}\n\nfunction transformJSXElement(path, parent) {\n  var name = getIdentifierName(path.node.openingElement.name);\n  var identifier = path.scope.generateUidIdentifier(name);\n  var result = [];\n  var declaration = documentCreateElement(identifier, name);\n  result.push(declaration);\n  var attributes = path.node.openingElement.attributes.map(function (attr) {\n    return setAttribute(identifier, attr.name.name, attr.value);\n  });\n  attributes.forEach(function (attr) {\n    return result.push(attr);\n  });\n  var childrens = path.get('children').filter(isEmptyJSXText).map(function (elem) {\n    return transformElement(elem, identifier);\n  }).map(function (_ref2) {\n    var statements = _ref2.statements;\n    return statements;\n  });\n  childrens.forEach(function (children) {\n    return result.push.apply(result, _toConsumableArray(children));\n  });\n\n  if (parent) {\n    result.push(appendChild(parent, identifier));\n  }\n\n  return {\n    identifier: identifier,\n    statements: result\n  };\n}\n\nfunction transformJSXText(path, parent) {\n  var identifier = path.scope.generateUidIdentifier('text');\n  var statements = [documentCreateTextNode(identifier, t.stringLiteral(path.node.value))];\n\n  if (parent) {\n    statements.push(appendChild(parent, identifier));\n  }\n\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction transformJSXExpression(path, parent) {\n  switch (path.node.expression.type) {\n    case 'BinaryExpression':\n      return transformBinaryExpression(path.get('expression'), parent);\n\n    case 'CallExpression':\n      return transformCallExpression(path.get('expression'), parent);\n\n    case 'LogicalExpression':\n      return transformLogicalExpression(path.get('expression'), parent);\n\n    case 'ConditionalExpression':\n      return transformConditionalExpression(path.get('expression'), parent);\n\n    default:\n      return transformElement(path.get('expression'), parent);\n  }\n\n  throw new Error('Unknown expression type: ' + path.node.expression.type);\n}\n\nfunction transformBinaryExpression(path, parent) {\n  var identifier = path.scope.generateUidIdentifier('result');\n  var statements = [documentCreateTextNode(identifier, path.node)];\n\n  if (parent) {\n    statements.push(appendChild(parent, identifier));\n  }\n\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction transformCallExpression(path, parent) {\n  if (isMapCallExpression(path.node)) {\n    return transformMapCallExpresion(path, parent);\n  } // normal call expression\n\n\n  var identifier = path.scope.generateUidIdentifier('result');\n  var statements = [declareConst(identifier, path.node)];\n\n  if (parent) {\n    statements.push(appendChild(parent, identifier));\n  }\n\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction transformMapCallExpresion(path, parent) {\n  normalizeBlockStatement(path.get('arguments.0.body'));\n\n  if (parent) {\n    // arr.forEach(i => parent.appendChild(i))\n    path.get('callee.property').replaceWith(t.identifier('forEach'));\n    var mapperBody = path.get('arguments.0.body.body');\n    var returnStatement = mapperBody.find(function (b) {\n      return b.node.type === 'ReturnStatement';\n    });\n\n    if (returnStatement) {\n      returnStatement.replaceWith(appendChild(parent, returnStatement.node.argument));\n    }\n\n    var statements = [t.expressionStatement(path.node)];\n    return {\n      identifier: null,\n      statements: statements\n    };\n  } else {\n    // identifier = arr.map(i => i)\n    var identifier = path.scope.generateUidIdentifier('lists'); // console.log(path.node);\n\n    var _statements = [declareConst(identifier, path.node)];\n    return {\n      identifier: identifier,\n      statements: _statements\n    };\n  }\n}\n\nfunction normalizeBlockStatement(path) {\n  if (path.node.type !== 'BlockStatement') {\n    path.replaceWith(t.blockStatement([t.returnStatement(path.node)]));\n  }\n\n  return path;\n}\n\nfunction transformLogicalExpression(path, parent) {\n  switch (path.node.operator) {\n    case '&&':\n      return transformLogicalAndExpression(path, parent);\n\n    case '||':\n      return transformLogicalOrExpression(path, parent);\n  }\n\n  throw new Error('Unknown logical operator: ' + path.node.operator);\n}\n\nfunction transformLogicalAndExpression(path, parent) {\n  var identifier = path.scope.generateUidIdentifier('result');\n  var consequent = transformElement(path.get('right'), parent);\n  var statements = [ifBlock(path.node.left, consequent.statements)];\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction transformLogicalOrExpression(path, parent) {\n  var identifier = path.scope.generateUidIdentifier('result');\n  var consequent = transformElement(path.get('left'), parent);\n  var alternate = transformElement(path.get('right'), parent);\n  var statements = [ifBlock(path.node.left, consequent.statements, alternate.statements)];\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction transformConditionalExpression(path, parent) {\n  var identifier = path.scope.generateUidIdentifier('result');\n  var consequent = transformElement(path.get('consequent'), parent);\n  var alternate = transformElement(path.get('alternate'), parent);\n  var statements = [ifBlock(path.node.test, consequent.statements, alternate.statements)];\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction transformIdentifier(path, parent) {\n  var identifier = path.node;\n  var statements = parent ? [appendChild(parent, identifier)] : [];\n  return {\n    identifier: identifier,\n    statements: statements\n  };\n}\n\nfunction getIdentifierName(node) {\n  switch (node.type) {\n    case 'JSXMemberExpression':\n      return getIdentifierName(node.object) + '.' + getIdentifierName(node.property);\n\n    case 'JSXIdentifier':\n      return node.name;\n\n    default:\n      throw new Error('Unknown type: ' + node.type);\n  }\n}\n\nfunction documentCreateElement(identifier, elemName) {\n  // handle functional component?\n  return declareConst(identifier, t.callExpression(t.memberExpression(t.identifier('document'), t.identifier('createElement')), [t.stringLiteral(elemName)]));\n}\n\nfunction documentCreateTextNode(identifier, node) {\n  return declareConst(identifier, t.callExpression(t.memberExpression(t.identifier('document'), t.identifier('createTextNode')), [node]));\n}\n\nfunction declareConst(identifier, value) {\n  return t.variableDeclaration('const', [t.variableDeclarator(identifier, value)]);\n}\n\nfunction appendChild(parent, child) {\n  if (child.type === 'ArrayExpression') {\n    return t.expressionStatement(t.sequenceExpression(child.elements.map(function (c) {\n      return appendChild(parent, c).expression;\n    })));\n  }\n\n  return t.expressionStatement(t.callExpression(t.memberExpression(parent, t.identifier('appendChild')), [child]));\n}\n\nfunction setAttribute(identifier, key, value) {\n  var _value = value.type === 'JSXExpressionContainer' ? value.expression : value;\n\n  return t.expressionStatement(t.callExpression(t.memberExpression(identifier, t.identifier('setAttribute')), [t.stringLiteral(key), _value]));\n}\n\nfunction isEmptyJSXText(path) {\n  return !(path.node.type === 'JSXText' && path.node.value.trim() === '');\n}\n\nfunction toArray(list) {\n  return t.arrayExpression(list);\n}\n\nfunction ifBlock(condition, thenCase, elseCase) {\n  var thenCaseArray = thenCase ? Array.isArray(thenCase) ? thenCase : [thenCase] : [];\n  var elseCaseArray = elseCase ? Array.isArray(elseCase) ? elseCase : [elseCase] : [];\n  return t.ifStatement(condition, t.blockStatement(thenCaseArray), elseCase ? t.blockStatement(elseCaseArray) : null);\n}\n\nfunction isDamuRender(node) {\n  return node.callee && node.callee.type === 'MemberExpression' && node.callee.object && node.callee.object.type === 'Identifier' && node.callee.object.name === 'Damu' && node.callee.property.type === 'Identifier' && node.callee.property.name === 'render';\n}\n\nfunction unshiftIntoBlock(path, statement) {\n  switch (path.node.type) {\n    case 'ArrowFunctionExpression':\n    case 'FunctionExpression':\n    case 'FunctionDeclaration':\n      path.get('body').unshiftContainer('body', statement);\n      return;\n\n    default:\n      path.unshiftContainer('body', statement);\n  }\n}\n\nfunction isMapCallExpression(node) {\n  return node.callee && node.callee.type === 'MemberExpression' && node.callee.property && node.callee.property.type === 'Identifier' && node.callee.property.name === 'map' && node.arguments && node.arguments.length === 1 && ['FunctionExpression', 'ArrowFunctionExpression'].includes(node.arguments[0].type);\n}","export default {\n  simple: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <h1 id=\"title\" height={54}>Hello world</h1>,\n  document.querySelector('#app')\n);`,\n  fragment: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <>\n    <h2>The Damu-Madu Project</h2>\n    <p>The Damu-Madu sister project aims to bring the developer experience of writing JSX (XML in JavaScript) without having to use React.</p>\n    <p>JSX is independent of React, you don't have to use React just to use JSX in your development process.</p>\n    <p>The Damu-Madu sister project contains solution for both client render and server render:</p>\n    <ul>\n      <li><a href=\"https://github.com/tanhauhau/madu\">madu</a> - Writing jsx as if html string</li>\n      <li><a href=\"https://github.com/tanhauhau/damu\">damu</a> - Converts jsx to vanilla javascript</li>\n    </ul>\n  </>,\n  document.querySelector('#app')\n);`,\n\n  list: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <div className=\"body\">\n    <h1 className=\"header\">You shall not pass</h1>\n    <ul>\n      <li id=\"frodo\">Frodo Baggins</li>\n      <li id=\"samwise\">Samwise Gamgee</li>\n      <li id=\"gandalf\">Gandalf the Grey</li>\n      <li id=\"legolas\">Legolas</li>\n      <li id=\"gimli\">Gimli</li>\n      <li id=\"aragorn\">Aragorn</li>\n      <li id=\"boromir\">Boromir</li>\n      <li id=\"meriadoc\">Meriadoc</li>\n      <li id=\"peregrin\">Peregrin</li>\n    </ul>\n  </div>,\n  document.querySelector('#app')\n);`,\n\n  map: `const Damu = require('@damu/damu');\n\nDamu.render(\n  <li>\n    {buyers.map(buyer => (\n      <li>\n        {buyer.firstName} - {buyer.lastName}\n        {buyer.followers.map((follower, index) => (\n          <>\n            <li>\n              {index}. {follower.firstName} - {follower.lastName}\n            </li>\n            <li className=\"hidden\">\n              {index % 2 == 0 ? 'odd' : 'even'}\n            </li>\n          </>\n        ))}\n      </li>\n    ))}\n  </li>,\n  document.querySelector('#app')\n);`\n};\n","import React, { Component } from 'react';\n\nimport AceEditor from 'react-ace';\nimport 'brace';\nimport 'brace/mode/jsx';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\n\nimport * as babel from '@babel/core';\nimport damuPlugin from '@damu/babel-transform-damu-plugin';\nimport demos from './demos';\n\nimport './App.css';\n\nconst demoList = Object.keys(demos);\nconst EDITOR_PROPS = { $blockScrolling: true };\nconst ACE_PREVIEW_OPTIONS = { useWorker: false };\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: demos.simple,\n      transpiled: '',\n      error: null,\n      previewMode: 'both',\n    };\n  }\n  onChange = value => {\n    this.setState({ value, error: null });\n    this.transpile(value);\n  };\n\n  onChangeTemplate = event => {\n    const value = demos[event.currentTarget.value];\n    this.setState({\n      value,\n      error: null,\n    });\n    this.transpile(value);\n  };\n\n  onPreviewModeChange = event => {\n    this.setState({\n      previewMode: event.currentTarget.value,\n    });\n  };\n\n  componentDidMount() {\n    this.transpile(this.state.value);\n  }\n\n  transpile = code => {\n    babel\n      .transformAsync(code, {\n        plugins: [damuPlugin],\n      })\n      .then(result => {\n        this.setState({ transpiled: simplePrettier(result.code) });\n        if (this.iframe) {\n          while (this.iframe.firstChild) {\n            this.iframe.removeChild(this.iframe.firstChild);\n          }\n          //\n          const iframe = document.createElement('iframe');\n          this.iframe.appendChild(iframe);\n\n          var previewIframe =\n            iframe.contentDocument || iframe.contentWindow.document;\n          previewIframe.open();\n          previewIframe.write(codeToHtml(result.code));\n          previewIframe.close();\n        }\n      })\n      .catch(error => {\n        this.setState({ transpiled: '', error: error.message });\n      });\n  };\n\n  onIframeRef = ref => {\n    this.iframe = ref;\n  };\n\n  render() {\n    const { previewMode } = this.state;\n    return (\n      <>\n        <div className=\"navbar\">\n          <span>Damu Demo</span>\n          <label>\n            {'Demo: '}\n            <select onChange={this.onChangeTemplate}>\n              {demoList.map(demo => (\n                <option key={demo} value={demo}>\n                  {demo}\n                </option>\n              ))}\n            </select>\n          </label>\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://github.com/tanhauhau/damu\"\n          >\n            View it on Github\n          </a>\n        </div>\n        <div className=\"App\">\n          <AceEditor\n            height=\"calc(100vh - 50px)\"\n            width=\"50vw\"\n            mode=\"jsx\"\n            theme=\"tomorrow\"\n            fontSize={14}\n            onChange={this.onChange}\n            showGutter={true}\n            name=\"editor\"\n            value={this.state.value}\n            editorProps={EDITOR_PROPS}\n            tabSize={2}\n            enableBasicAutocompletion={true}\n            enableLiveAutocompletion={true}\n            showLineNumbers={true}\n          />\n          <div className={`preview preview-${previewMode}`}>\n            <div className=\"preview-dashboard\">\n              <div>\n                <label>\n                  <input\n                    id=\"both\"\n                    value=\"both\"\n                    name=\"preview-mode\"\n                    type=\"radio\"\n                    checked={previewMode === 'both'}\n                    onChange={this.onPreviewModeChange}\n                  />\n                  Both\n                </label>\n                <label>\n                  <input\n                    id=\"code\"\n                    value=\"code\"\n                    name=\"preview-mode\"\n                    type=\"radio\"\n                    checked={previewMode === 'code'}\n                    onChange={this.onPreviewModeChange}\n                  />\n                  Code\n                </label>\n                <label>\n                  <input\n                    id=\"html\"\n                    value=\"html\"\n                    name=\"preview-mode\"\n                    type=\"radio\"\n                    checked={previewMode === 'html'}\n                    onChange={this.onPreviewModeChange}\n                  />\n                  HTML\n                </label>\n              </div>\n            </div>\n            <AceEditor\n              height={`calc(${previewMode === 'code' ? 100 : 50}vh - 80px)`}\n              width=\"50vw\"\n              mode=\"javascript\"\n              theme=\"tomorrow\"\n              readOnly={true}\n              fontSize={14}\n              showGutter={true}\n              name=\"preview\"\n              value={this.state.error || this.state.transpiled}\n              editorProps={EDITOR_PROPS}\n              tabSize={2}\n              showLineNumbers={true}\n              setOptions={ACE_PREVIEW_OPTIONS}\n            />\n            <div ref={this.onIframeRef} />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction simplePrettier(code) {\n  return code\n    .split('\\n')\n    .filter(line => line.trim() !== '')\n    .map(line =>\n      /^[\\s\\t]*(const|document|if)/.test(line) ? '\\n' + line : line\n    )\n    .join('\\n')\n    .trim();\n}\n\nfunction codeToHtml(code) {\n  return `<html>\n    <body>\n      <div id=\"app\" />\n    </body>\n    <script type=\"text/javascript\">${code}</script>\n  </html>`;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}